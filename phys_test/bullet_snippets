/// THIS IS FOR A CONVEX HULL
btConvexShape* tmpConvexShape = new btConvexTriangleMeshShape(m_rocketMesh->getMesh());
 
// create a hull approximation
btShapeHull* hull = new btShapeHull(tmpConvexShape);
btScalar margin = tmpConvexShape->getMargin();
hull->buildHull(margin);
tmpConvexShape->setUserPointer(hull);
  
btConvexHullShape* convexShape = new btConvexHullShape();
for (int i=0;i<hull->numVertices();i++) {
    convexShape->addPoint(hull->getVertexPointer()[i]); 
}

delete tmpConvexShape;
delete hull;

m_collisionShapes.push_back(convexShape);

btTransform startTransform;
startTransform.setIdentity();
startTransform.setOrigin(btVector3(0,10,0));
startTransform.setRotation(btQuaternion(0,0,1,1));

btRigidBody* body = localCreateRigidBody(mass, startTransform, convexShape);
body->setRestitution(0.1);
m_sphere = body;
/// END CONVEX

/// THIS IS FOR A COMPOUND OBJECT        
btCollisionShape *sphereShape = new btSphereShape(1);
m_collisionShapes.push_back(sphereShape); // goes into index 3
btCollisionShape *coneShape = new btConeShape(.25,.5);
m_collisionShapes.push_back(coneShape); // goes into index 4
sphereShape->calculateLocalInertia(mass, localInertia);
coneShape->calculateLocalInertia(2.f, localInertia);
btCompoundShape *rocketShape = new btCompoundShape();
btTransform bodyTrans(btQuaternion(0,0,0), btVector3(0,0,0));
rocketShape->addChildShape(bodyTrans, sphereShape);

float z_offset = -0.7;
btVector3 engineOffsets[4] = {{-1, z_offset,  0},
                              { 1, z_offset,  0},
                              { 0, z_offset, -1},
                              { 0, z_offset,  1}};
for (int i = 0; i != 4; ++i) {
    btTransform engineTrans(btQuaternion(0,0,0), engineOffsets[i]);
    rocketShape->addChildShape(engineTrans, coneShape);
}
/// END COMPOUND OBJECT

// create a few dynamic rigidbodies
// Re-using the same collision is better for memory usage and performance
int gNumObjects = 120;
for (int i=0; i != gNumObjects; ++i) {
    btCollisionShape* shape = m_collisionShapes[1];
   
    btTransform trans;
    trans.setIdentity();

    // stack them
    int colsize = 10;
    int row = (i*CUBE_HALF_EXTENTS*2)/(colsize*2*CUBE_HALF_EXTENTS);
    int row2 = row;
    int col = (i)%(colsize)-colsize/2;

    if (col>3) {
        col=11;
        row2 |=1;
    }

    btVector3 pos(col*2*CUBE_HALF_EXTENTS + (row2%2)*CUBE_HALF_EXTENTS,
                  row*2*CUBE_HALF_EXTENTS+CUBE_HALF_EXTENTS+EXTRA_HEIGHT,
                  0);
    trans.setOrigin(pos);
 
    float mass = 1.f;
    btRigidBody* body = localCreateRigidBody(mass,trans,shape);
    body->setRestitution(.8);
 
    /// when using m_ccdMode
    if (m_ccdMode==USE_CCD) {
        body->setCcdMotionThreshold(CUBE_HALF_EXTENTS);
        body->setCcdSweptSphereRadius(0.9*CUBE_HALF_EXTENTS);
    }
}
